#!/bin/sh

# Exit immediately if any command exits with a non-zero status.
set -e

if [ $# -lt 1 ]; then
  echo "$0: No module_key supplied - please run 'docker compose exec terraform setup <module_key>' to open a shell in the relevant exercise directory."
  exit 2
elif [ $# -eq 1 ]; then
  SW_MODULE_KEY=$1
elif [ $# -gt 1 ]; then
  echo "$0: too many arguments"; exit 2
fi

# Read the attendance id from the file `attendance_id`
TF_VAR_attendance_id=$(cat ./attendance_id)

# Check if the attendance id is still the default, and if so exit with an appropriate error message
if [ $TF_VAR_attendance_id = "your_attendance_id_here" ];
then
    echo "Could not find a valid attendance id in attendance_id file. Please replace the file contents with your attendance id and try again."
    exit 1
fi

# Export the attendance id as an environment variable so that terraform can use it
export TF_VAR_attendance_id

# This file is written by aws_credential_service - it's needed because the S3 buckets are named by account ID for global uniqueness, and so we need to know the account ID to access the state.
if [ -f "./.session_info/$TF_VAR_attendance_id/aws_account_id" ]; then
    AWS_ACCOUNT_ID=$(cat ./.session_info/$TF_VAR_attendance_id/aws_account_id)
else
    # If we haven't got the aws_account_id we can't continue - in theory we could revert to local state, but that gets too complicated.
    echo "Could not find aws_account_id - check if aws_credential_service has run successfully."
    exit 1
fi

echo "Using AWS account ID: $AWS_ACCOUNT_ID"

# Change to the relevant exercise directory
cd "exercises/$SW_MODULE_KEY"

# Initialise terraform - this can't be in the Dockerfile because the subdirectory we want to init is not known at build time.
terraform init \
 -backend-config="bucket=skw-learner-$AWS_ACCOUNT_ID-tfstate" \
 -backend-config="key=$TF_VAR_attendance_id" \
 -reconfigure
# If init has been run in this directory before with a different backend config (i.e. attendance_id),
# then the -reconfigure argument tells Terraform to ignore the previous config.
# Without this, Terraform would ask if you wanted to migrate the old state, which is not what we want, especially as the old state has probably been nuked with the rest of the account.

# Do not exit if there are errors after this point - they are likely to be resolvable terraform errors, and rerunning this script will make them worse.
set +e

# Create any initial resources specified by the file "initial_state.tf"
terraform apply -auto-approve

# Leave the shell open to further commands
/bin/sh
