#!/bin/sh

# Exit immediately if any command exits with a non-zero status.
set -e

# Read the attendance id from the file `attendance_id`
TF_VAR_attendance_id=$(cat ./attendance_id)

# Check if the attendance id is still the default, and if so exit with an appropriate error message
if [ $TF_VAR_attendance_id = "your_attendance_id_here" ];
then
    echo "Could not find a valid attendance id in attendance_id file. Please replace the file contents with your attendance id and try again."
    exit 1
fi

# Export the attendance id as an environment variable so that terraform can use it
export TF_VAR_attendance_id

# Read the module key from the file /root/.sw_module_key
SW_MODULE_KEY = $(cat /root/.sw_module_key)

# If the module key is there, we can initialise the terraform in the relevant directory, otherwise, we need to ensure the user knows to run the setup command.
if [ -n $SW_MODULE_KEY ];
then
    cd "exercises/$SW_MODULE_KEY"

    # If there is existing state, delete it. Any state that is there should be from a previous session, and so will be obsolete as the AWS account will probably be different, and definitely cleared up.
    rm -f terraform.tfstate terraform.tfstate.backup

    # Initialise terraform - this can't be in the Dockerfile because the subdirectory we want to init is not known at build time.
    terraform init

    # Create any initial resources specified by the file "initial_state.tf"
    terraform apply -auto-approve
else
    echo "Could not find module key - please run 'docker compose exec terraform setup <module_key>' to open a shell in the relevant exercise directory."
fi

tail -f /dev/null # Keep the container open
